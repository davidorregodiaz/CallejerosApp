@page "/adoptions"
@using Client.Services
@using Shared.Utilities
@using Shared
@using Client.Utilites
@using Microsoft.AspNetCore.Components.Authorization
@inject AnimalService AnimalService

  <div class="" style="opacity: @(_isLoading ? "1" : "0"); min-height: 100vh; display: @(_isLoading ? "flex" : "none"); align-items: center; justify-content: center;transition: all 0.5s ease-in-out;">
    <p style="color: black;font-size: 2rem">Loading...</p>
  </div>
  <div class="bg-gray-50 min-h-screen" style="opacity:@(_isLoading ? "0" : "1");transition: all 0.5s ease-in-out">
    <div class="mx-auto max-w-2xl px-4 py-16 sm:px-6 sm:py-32 lg:max-w-7xl lg:px-8">
      <div class="flex items-center justify-between">
        <div class="flex gap-4 pb-4 mb-8" id="filters">
          <div style="width: 200px;">
            <div class="overflow-hidden">
              <div class="relative mt-2" style="max-width: 700px; height: auto">
                <label class="text-gray-900" for="types-select">Types</label>
                <InputSelect id="types-select"
                  class="grid w-full cursor-default grid-cols-1 rounded-md bg-white py-1.5 pr-2 pl-3 text-left text-gray-900 outline-1 -outline-offset-1 outline-gray-300 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6"
                  Value="@_selectedType" ValueExpression="() => _selectedType"
                  ValueChanged="(string animalType) => FilterAnimalsByType(animalType)">
                  <option class="text-gray-900 bg-inherit" value="---All animals---">
                    ---All animals---
                  </option>
                  @foreach (var type in AnimalsTypesAndBreeds.AnimalsTypes)
                  {
                    <option class="text-gray-900 bg-inherit" value="@type">@type</option>
                  }
                </InputSelect>
              </div>
            </div>
          </div>
          <div style="width: 200px;">
            <div class="overflow-hidden">
              <div class="relative mt-2" style="max-width: 700px;height: auto;">
                <label class="text-gray-900" for="breeds-select">Breeds</label>
                <InputSelect id="breeds-select"
                  class="grid w-full cursor-default grid-cols-1 rounded-md bg-white py-1.5 pr-2 pl-3 text-left text-gray-900 outline-1 -outline-offset-1 outline-gray-300 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6"
                  Value="@_selectedBreed" ValueExpression="() => _selectedBreed"
                  ValueChanged="(string animalBreed) => FilterAnimalsByBreed(animalBreed)">
                  @if (_breeds is not null)
                  {
                    foreach (var breed in _breeds)
                    {
                      <option class="text-gray-900 bg-inherit" value="@breed">@breed</option>
                    }
                  }
                </InputSelect>
              </div>
            </div>
          </div>
        </div>
        <div class="flex items-center justify-center">
          <AuthorizeView>
            <Authorized>
              <NavLink href="/adoptions/create"
                class="rounded-full bg-indigo-700 px-3.5 py-2.5 font-display text-sm font-semibold text-white shadow-xs hover:bg-indigo-500 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-white transition-colors ease-in-out duration-75">
                Post Adoption
              </NavLink>
            </Authorized>
            <NotAuthorized>
              <NavLink href="/signIn"
                class="rounded-full bg-indigo-700 px-3.5 py-2.5 font-display text-sm font-semibold text-white shadow-xs hover:bg-indigo-500 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-white transition-colors ease-in-out duration-75">
                Sign In to Post Adoption
              </NavLink>
            </NotAuthorized>
          </AuthorizeView>
        </div>
      </div>

      @if (_result.IsSuccessful(out _))
      {
        <div class="mt-6 grid grid-cols-1 gap-x-6 gap-y-10 sm:grid-cols-2 lg:grid-cols-4 xl:gap-x-8">
          @foreach (var animal in _filteredAnimals)
          {
            <NavLink href="@($"/adoptions/{animal.Id}")">
              <div class="group relative">
                <div style="max-width: 100%;max-height: 200px;overflow: hidden;display: flex">
                    <img transition:name="img-@animal.Id" src="/@animal.Images.FirstOrDefault().Replace('\\', '/')" alt="Dog picture"
                      class="aspect-square w-full rounded-md bg-gray-200 object-cover group-hover:opacity-75 lg:aspect-auto lg:h-80" />
                </div>
                <div class="mt-4 flex justify-between">
                  <div>
                    <h3 class="text-sm text-gray-700">
                      <div>
                        <span aria-hidden="true" class="absolute inset-0"></span>
                        @animal.Name
                      </div>
                    </h3>
                    <p class="mt-1 text-sm text-gray-600">@animal.Breed</p>
                  </div>
                  <p class="text-sm font-medium text-gray-900">@(animal.Age > 1 ? $"{animal.Age} years" : "1 year")</p>
                </div>
              </div>
            </NavLink>
          }
        </div>
      }
    </div>
  </div>
}

@code
{
  private IEnumerable<ResponseAnimalDto> _animals { get; set; } = Enumerable.Empty<ResponseAnimalDto>();
  private IEnumerable<ResponseAnimalDto> _filteredAnimals { get; set; } = Enumerable.Empty<ResponseAnimalDto>();
  private List<string>? _breeds { get; set; } = new List<string> { "---All breeds---" };
  private bool _isLoading = true;
  private TaskResult<IEnumerable<ResponseAnimalDto>> _result;
  private string _selectedType { get; set; } = "---All animals---";
  private string _selectedBreed { get; set; } = "---All breeds---";

  private int _opacity = 0;

  private void FilterAnimalsByType(string animalType)
  {
    _selectedType = animalType;

    string normalizedType = animalType.Trim().ToLower();

    if (normalizedType == "---all animals---")
    {
      _filteredAnimals = _animals;
      _breeds = new List<string> { "---All breeds---" };
    }
    else
    {
      _filteredAnimals = _animals
      .Where(a => a.Type.Equals(animalType, StringComparison.OrdinalIgnoreCase))
      .ToList();

      _breeds = LoadAnimalBreeds(_selectedType);
      _selectedBreed = "---All breeds---";
    }
    StateHasChanged();
  }

  private List<string> LoadAnimalBreeds(string selectedType)
  {
    return AnimalsTypesAndBreeds.GetBreedsForType(selectedType);
  }

  protected override async Task OnInitializedAsync()
  {
    _result = await AnimalService.GetAnimalsAsync();

    if (_result.IsSuccessful(out var animals))
    {
      _animals = animals;
      _filteredAnimals = _animals;
    }
    _isLoading = false;
  }

  protected override void OnAfterRender(bool firstRender)
  {
    if(firstRender)
    {
      _opacity = 1;
    }
  }

  private void FilterAnimalsByBreed(string animalBreed)
  {
    _selectedBreed = animalBreed;

    string normalizedBreed = animalBreed.Trim().ToLower();

    if (string.Equals(normalizedBreed, "---all breeds---", StringComparison.CurrentCultureIgnoreCase))
    {
      _filteredAnimals = _animals.Where(a => string.Equals(a.Type, _selectedType,
      StringComparison.CurrentCultureIgnoreCase)).ToList();
    }
    else
    {
      _filteredAnimals = _animals.Where(a =>
      string.Equals(a.Breed, animalBreed, StringComparison.CurrentCultureIgnoreCase)).ToList();
    }
    StateHasChanged();
  }
}
