@page "/adoptions/create"
@using System.Net
@using System.Net.Http.Headers
@using System.Text
@using System.Text.Json
@using Shared.Utilities
@using Client.Models
@using Client.Services
@using Shared
@using System.Security.Claims
@inject AnimalService _animalService
@inject AuthService _authService
@inject HttpClient Client

<div class="bg-gray-50 h-screen flex items-center justify-center p-4" >
  <div class="w-full max-w-2xl bg-white rounded-xl shadow-lg p-8" style="@($"opacity: {(_isLoading ? "0" : "1")}; transform: scale({(_isLoading ? "0.95" : "1")}); transition: all 0.3s ease-in-out;margin-top:26px")">
    <EditForm Model="_animal" OnValidSubmit="Submit" FormName="AdoptionForm" enctype="multipart/form-data" id="multiForm"
      class="space-y-6"
      >
      <DataAnnotationsValidator />
      <div @ondragenter="OnDragEnter" @ondragover="OnDragEnter" @ondragleave="OnDragLeave"
        class="relative rounded-lg p-8 text-center hover:border-indigo-500 transition-colors" id="dropZone"
        style="border: 2px dashed @_borderColor; margin-bottom: 20px;">
        <InputFile id="images-input" multiple OnChange="OnChange"
          class="absolute inset-0 w-full h-full opacity-0 cursor-pointer" style="z-index: 1000" />
        <div class="space-y-2">
          <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48"
            aria-hidden="true">
            <path
              d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
              stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
          </svg>
          <div class="text-sm text-gray-600">
            <label for="fileInput"
              class="relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-blue-500">
              <span>Upload images</span>
            </label>
            <p class="pl-1">or drag and drop</p>
          </div>
          <p class="text-xs text-gray-500">PNG, JPG, GIF up to 2MB</p>
        </div>
        <div id="preview" class="mt-4 grid grid-cols-3 gap-4" style="max-height: 300px;overflow: auto">
          @foreach (var image in _previewImagesUrl)
          {
            <div style="overflow: hidden;max-width: 200px;max-height: 200px">
              <img class="object-cover max-w-full" src="@image" alt="dog picture" />
            </div>
          }
        </div>
      </div>
      <div class="space-y-4">
        <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
          <div>
            <label for="name" class="block text-sm font-medium text-gray-900">Full Name</label>
            <InputText @bind-Value="_animal.Name" id="name" name="name" required
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-600 focus:ring-indigo-600 sm:text-sm py-3 px-4 text-gray-900"
              placeholder="Enter your full name" style="padding: 10px;" />
            <ValidationMessage For="() => _animal.Name" style="color: red;" />
            <p class="mt-1 hidden text-sm text-red-600" id="nameError"></p>
          </div>

          <div>
            <label for="age" class="block text-sm font-medium text-gray-900">Age</label>
            <InputNumber @bind-Value="_animal.Age" id="age" name="age" min="1" max="100" required
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-600 focus:ring-indigo-600 sm:text-sm text-gray-900 py-3 px-4"
              placeholder="Enter your age" style="padding: 10px;" />
            <ValidationMessage For="() => _animal.Age" />
            <p class="mt-1 hidden text-sm text-red-600" id="ageError"></p>
          </div>
        </div>
        <div class="space-y-4">
          <div style="width: auto;">
            <div class="overflow-hidden">
              <div class="relative mt-2" style="max-width: 700px; height: auto">
                <label class="text-gray-900" for="types-select">Types</label>
                <InputSelect id="types-select"
                  class="grid w-full cursor-default grid-cols-1 rounded-md bg-white py-1.5 pr-2 pl-3 text-left text-gray-900 outline-1 -outline-offset-1 outline-gray-300 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6"
                  Value="@_selectedType" ValueExpression="() => _selectedType"
                  ValueChanged="(string animalType) => SetSelectedType(animalType)">
                  <option class="text-gray-900 bg-inherit" value="---All animals---">
                    ---All animals---
                  </option>
                  @foreach (var type in AnimalsTypesAndBreeds.AnimalsTypes)
                  {
                    <option class="text-gray-900 bg-inherit" value="@type">@type</option>
                  }
                </InputSelect>
              </div>
            </div>
            <div>
              <ValidationMessage style="color: red;" For="() => _animal.Type" />
            </div>
          </div>
          <div style="width: auto;">
            <div class="overflow-hidden">
              <div class="relative mt-2" style="max-width: 700px;height: auto;">
                <label class="text-gray-900" for="breeds-select">Breeds</label>
                <InputSelect id="breeds-select"
                  class="grid w-full cursor-default grid-cols-1 rounded-md bg-white py-1.5 pr-2 pl-3 text-left text-gray-900 outline-1 -outline-offset-1 outline-gray-300 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6"
                  Value="@_selectedBreed" ValueExpression="() => _selectedBreed"
                  ValueChanged="(string animalBreed) => OnBreedSelected(animalBreed)">
                  @foreach (var breed in _breeds)
                  {
                    <option class="text-gray-900 bg-inherit" value="@breed">@breed</option>
                  }
                </InputSelect>
              </div>
            </div>
            <ValidationMessage style="color:red" For="() => _animal.Breed" />
          </div>
        </div>
        <div>
          <label for="description" class="block text-sm font-medium text-gray-900">Description</label>
          <InputTextArea @bind-Value="_animal.Description" id="description" name="description" rows="4" maxlength="500"
            required
            class="text-gray-900 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-600 focus:ring-indigo-600 sm:text-sm py-3 px-4 resize-y"
            style="padding: 4px;" placeholder="Tell us about yourself" />
          <p class="mt-1 text-sm text-gray-500" id="charCount">0/500 characters</p>
        </div>
      </div>
      <div class="flex flex-col items-end gap-4">
        <button type="submit"
          style="background-color: @(_isSubmitSuccessful ? "green" : "#432dd7");"
          class="inline-flex items-center justify-center py-2 px-4 border border-transparent
                 shadow-sm text-sm font-medium rounded-md text-white
                 @(_isSubmitSuccessful ? "bg-green-600 hover:bg-green-700 focus:ring-green-500" : "bg-indigo-600 hover:bg-indigo-700 focus:ring-indigo-500")
                 focus:outline-none focus:ring-2 focus:ring-offset-2
                 transition-all duration-300 ease-in-out">
                 
          @if (_isSubmitSuccessful)
          {
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
          }
          @(_isSubmitSuccessful ? "¡Publicado con éxito!" : "Dar en adopción")
        </button>
            <div class="@(_isSubmitSuccessful ? _animationFadeIn : _animationFadeOut) transition-all ease-in-out delay-300">
                <NavLink href="/Adoptions"
                        class="text-green-600 hover:text-green-800 font-medium flex items-center gap-2 transition-all duration-300 ease-in-out" style="color: green;">
                    <span>Ver mi publicación</span>
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                    </svg>
                </NavLink>
            </div>
      </div>
      <ValidationSummary style="color:red" />
    </EditForm>
  </div>
</div>



@code
{

  private const string _animationFadeIn = "opacity-100 scale-100 pointer-events-auto";
  private const string _animationFadeOut = "opacity-0 scale-95 pointer-events-none";
  [SupplyParameterFromForm]
  private Animal _animal { get; set; } = new Animal();
  private List<string> _breeds { get; set; } = new List<string>();
  private string _selectedType { get; set; } = "---All animals---";
  private string _selectedBreed { get; set; } = "---All breeds---";
  private string _borderColor = "gray";
  private TaskResult? _result = null;
  private bool _isSubmitSuccessful = false;
  private bool _isLoading = true;

  private IReadOnlyCollection<IBrowserFile> Images { get; set; }

  private void OnDragEnter(DragEventArgs e) => _borderColor = "blue";
  private void OnDragLeave(DragEventArgs e) => _borderColor = "gray";

  private void SetSelectedType(string type)
  {
    if (type is not null)
    {
      _selectedType = type;

      string normalizedType = type.Trim().ToLower();

      if (normalizedType == "---all animals---")
      {
        _breeds = new List<string> { "---All breeds---" };
      }
      else
      {
        _animal.Type = _selectedType;
        _breeds = AnimalsTypesAndBreeds.GetBreedsForType(type);
      }
      StateHasChanged();
    }
  }

  private void OnBreedSelected(string value)
  {
    _selectedBreed = value;
    _animal.Breed = value;
  }
  private async Task Submit()
  {
    var authState = await _authService.GetAuthenticationStateAsync();
    var user = authState.User;
    var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    _animal.OwnerId = userId!;
    var submitResult = await _animalService.PostAnimalAsync(_animal);
    _result = submitResult;
    _isSubmitSuccessful = submitResult.Success;
    StateHasChanged();
  }
  private const int MaxFileSize = 2 * 1024 * 1024; //2 MB
  private List<string> _previewImagesUrl = new List<string>();
  private async Task OnChange(InputFileChangeEventArgs e)
  {
    _animal.Images = e.GetMultipleFiles();

    foreach (var file in e.GetMultipleFiles(4))
    {
      var stream = new MemoryStream();
      await file.OpenReadStream(MaxFileSize).CopyToAsync(stream);
      stream.Position = 0;

      _previewImagesUrl.Add($"data:{file.ContentType};base64,{Convert.ToBase64String((stream.ToArray()))}");
    }
  }

  protected override async Task OnInitializedAsync()
  {
    await Task.Delay(50);
    _isLoading = false;
  }

}
