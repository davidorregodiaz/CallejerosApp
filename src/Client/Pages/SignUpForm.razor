@page "/SignUp"
@using Client.Models
@using Client.Services
@using Shared
@inject NavigationManager _nav
@inject AuthService _authService

<div class="bg-gray-50 h-screen flex items-center justify-center p-4">
  <div
    class="bg-white rounded-xl shadow-lg"
    style="@($"opacity: {(_isLoading ? "0" : "1")}; transform: scale({(_isLoading ? "0.95" : "1")}); transition: all 0.3s ease-in-out;margin: auto;width:500px")">
    <div class="flex min-h-full flex-col justify-center px-6 py-12 lg:px-8">
      <div class="sm:mx-auto sm:w-full sm:max-w-sm">
        <img src="https://tailwindcss.com/plus-assets/img/logos/mark.svg?color=indigo&shade=600" alt="Your Company"
          class="mx-auto h-10 w-auto" />
        <h2 class="mt-10 text-center text-2xl/9 font-bold tracking-tight text-gray-900">Crea tu cuenta</h2>
      </div>

      <div class="mt-10 sm:mx-auto sm:w-full sm:max-w-sm">
        <EditForm Model="@_signUpModel" OnValidSubmit="Submit" FormName="SignUpForm" class="space-y-6">
          <DataAnnotationsValidator />
            <div>
              <label for="username" class="block text-sm/6 font-medium text-gray-900">Username</label>
              <div class="mt-2">
                <InputText @bind-Value="_signUpModel.Username" id="username" name="username" required
                  autocomplete="username"
                  class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6" />
              </div>
              <ValidationMessage For="() => _signUpModel.Username" />
          </div>
          <div>
            <label for="email" class="block text-sm/6 font-medium text-gray-900">Email address</label>
            <div class="mt-2">
              <InputText @bind-Value="_signUpModel.Email" id="email" type="email" name="email" required
                autocomplete="email"
                class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6" />
            </div>
            <ValidationMessage For="() => _signUpModel.Email" />
          </div>

          <div>
            <div class="flex items-center justify-between">
              <label for="password" class="block text-sm/6 font-medium text-gray-900">Password</label>
            </div>
            <div class="mt-2">
              <InputText @bind-Value="_signUpModel.Password" id="password" type="password" name="password" required
                autocomplete="current-password"
                class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6" />
            </div>
            <ValidationMessage For="() => _signUpModel.Password" />
          </div>

          <div>
            <button type="submit"
              style="transition: all .3s ease-in-out;"
              class="flex w-full justify-center rounded-md @(_isSigningUp ? "bg-gray-100" : "bg-indigo-600") px-3 py-1.5 text-sm/6 font-semibold text-white shadow-xs hover:bg-indigo-500 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">@(_isSigningUp ? "Iniciando sesion" : "Iniciar sesion")</button>
          </div>
        </EditForm>

        <p class="mt-10 text-center text-sm/6 text-gray-500">
          Â¿Tienes una cuenta?
          <NavLink href="/SignIn" class="font-semibold text-indigo-600 hover:text-indigo-500"> Inicia sesion aqui</NavLink>
        </p>
      </div>
    </div>
  </div>
</div>

@code {
  private UserRegisterModel _signUpModel = new UserRegisterModel();
  private TaskResult? result = new();
  private bool _isLoading = true;
  private bool _isSigningUp = false;

  protected override async Task OnInitializedAsync()
  {
    await Task.Delay(50);
    _isLoading = false;
  }
  private async Task Submit()
  {
    _isSigningUp = true;
    result = await _authService.SignUp(_signUpModel);
    _nav.NavigateTo("/");
  }
}